// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/transaction_manager.go
//
// Generated by this command:
//
//	mockgen -source=domain/repository/transaction_manager.go -destination=domain/mockreposiotry/transaction_manager.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITransactionManager is a mock of ITransactionManager interface.
type MockITransactionManager struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionManagerMockRecorder
}

// MockITransactionManagerMockRecorder is the mock recorder for MockITransactionManager.
type MockITransactionManagerMockRecorder struct {
	mock *MockITransactionManager
}

// NewMockITransactionManager creates a new mock instance.
func NewMockITransactionManager(ctrl *gomock.Controller) *MockITransactionManager {
	mock := &MockITransactionManager{ctrl: ctrl}
	mock.recorder = &MockITransactionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionManager) EXPECT() *MockITransactionManagerMockRecorder {
	return m.recorder
}

// RunInTx mocks base method.
func (m *MockITransactionManager) RunInTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunInTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunInTx indicates an expected call of RunInTx.
func (mr *MockITransactionManagerMockRecorder) RunInTx(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInTx", reflect.TypeOf((*MockITransactionManager)(nil).RunInTx), ctx, f)
}
