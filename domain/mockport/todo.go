// Code generated by MockGen. DO NOT EDIT.
// Source: domain/port/todo.go
//
// Generated by this command:
//
//	mockgen -source=domain/port/todo.go -destination=domain/mockport/todo.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	entity "github.com/maooz4426/Todolist/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockITodoUseCase is a mock of ITodoUseCase interface.
type MockITodoUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockITodoUseCaseMockRecorder
}

// MockITodoUseCaseMockRecorder is the mock recorder for MockITodoUseCase.
type MockITodoUseCaseMockRecorder struct {
	mock *MockITodoUseCase
}

// NewMockITodoUseCase creates a new mock instance.
func NewMockITodoUseCase(ctrl *gomock.Controller) *MockITodoUseCase {
	mock := &MockITodoUseCase{ctrl: ctrl}
	mock.recorder = &MockITodoUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoUseCase) EXPECT() *MockITodoUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITodoUseCase) Create(ctx context.Context, task *entity.Todo) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITodoUseCaseMockRecorder) Create(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITodoUseCase)(nil).Create), ctx, task)
}

// Delete mocks base method.
func (m *MockITodoUseCase) Delete(ctx context.Context, id string) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockITodoUseCaseMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockITodoUseCase)(nil).Delete), ctx, id)
}

// FindAll mocks base method.
func (m *MockITodoUseCase) FindAll(ctx context.Context) ([]*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockITodoUseCaseMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockITodoUseCase)(nil).FindAll), ctx)
}

// FindById mocks base method.
func (m *MockITodoUseCase) FindById(ctx context.Context, id string) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockITodoUseCaseMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockITodoUseCase)(nil).FindById), ctx, id)
}

// Update mocks base method.
func (m *MockITodoUseCase) Update(ctx context.Context, task *entity.Todo) (*entity.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, task)
	ret0, _ := ret[0].(*entity.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockITodoUseCaseMockRecorder) Update(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITodoUseCase)(nil).Update), ctx, task)
}
